__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _fbemitter = _require(_dependencyMap[0], "fbemitter");

  var _invariant = _require(_dependencyMap[1], "invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  var _warning = _require(_dependencyMap[2], "fbjs/lib/warning");

  var _warning2 = _interopRequireDefault(_warning);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var ExponentNotifications = _reactNative.NativeModules.ExponentNotifications;

  var _emitter = void 0;

  var _initialNotification = void 0;

  function _maybeInitEmitter() {
    if (!_emitter) {
      _emitter = new _fbemitter.EventEmitter();

      _reactNative.DeviceEventEmitter.addListener('Exponent.notification', _emitNotification);
    }
  }

  function _emitNotification(notification) {
    if (typeof notification === 'string') {
      notification = JSON.parse(notification);
    }

    notification = _extends({}, notification);

    if (typeof notification.data === 'string') {
      try {
        notification.data = JSON.parse(notification.data);
      } catch (e) {}
    }

    _emitter.emit('notification', notification);
  }

  function _processNotification(notification) {
    notification = _extends({}, notification);

    if (!notification.data) {
      notification.data = {};
    }

    if (notification.hasOwnProperty('count')) {
      delete notification.count;
    }

    if (_reactNative.Platform.OS === 'ios') {
      if (notification.android) {
        delete notification.android;
      }

      if (notification.ios) {
        notification = _extends(notification, notification.ios);
        delete notification.ios;
      }
    }

    if (_reactNative.Platform.OS === 'android') {
      if (notification.ios) {
        delete notification.ios;
      }

      if (notification.android) {
        notification = _extends(notification, notification.android);
        delete notification.android;
      }
    }

    return notification;
  }

  function _validateNotification(notification) {
    if (_reactNative.Platform.OS === 'ios') {
      (0, _invariant2.default)(!!notification.title && !!notification.body, 'Local notifications on iOS require both a title and a body');
    } else if (_reactNative.Platform.OS === 'android') {
      (0, _invariant2.default)(!!notification.title, 'Local notifications on Android require a title');
    }
  }

  var ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';
  var IS_USING_NEW_BINARY = typeof ExponentNotifications.createChannel === 'function';

  function _legacyReadChannel(id) {
    var channelString;
    return regeneratorRuntime.async(function _legacyReadChannel$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem("" + ASYNC_STORAGE_PREFIX + id));

          case 3:
            channelString = _context.sent;

            if (!channelString) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", JSON.parse(channelString));

          case 6:
            _context.next = 10;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);

          case 10:
            return _context.abrupt("return", null);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[0, 8]]);
  }

  function _legacyDeleteChannel(id) {
    return _reactNative.AsyncStorage.removeItem("" + ASYNC_STORAGE_PREFIX + id);
  }

  if (_reactNative.Platform.OS === 'android') {
    _reactNative.AsyncStorage.clear = function _callee(callback) {
      var keys, result, filteredKeys;
      return regeneratorRuntime.async(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getAllKeys());

            case 3:
              keys = _context2.sent;
              result = null;

              if (!(keys && keys.length)) {
                _context2.next = 10;
                break;
              }

              filteredKeys = keys.filter(function (key) {
                return !key.startsWith(ASYNC_STORAGE_PREFIX);
              });
              _context2.next = 9;
              return regeneratorRuntime.awrap(_reactNative.AsyncStorage.multiRemove(filteredKeys));

            case 9:
              result = _context2.sent;

            case 10:
              callback && callback(result);
              return _context2.abrupt("return", result);

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](0);
              callback && callback(_context2.t0);
              throw _context2.t0;

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[0, 14]]);
    };
  }

  function _legacySaveChannel(id, channel) {
    return _reactNative.AsyncStorage.setItem("" + ASYNC_STORAGE_PREFIX + id, JSON.stringify(channel));
  }

  exports.default = {
    _setInitialNotification: function _setInitialNotification(notification) {
      _initialNotification = notification;
    },
    getExpoPushTokenAsync: function getExpoPushTokenAsync() {
      return ExponentNotifications.getExponentPushTokenAsync();
    },
    getDevicePushTokenAsync: ExponentNotifications.getDevicePushTokenAsync,
    createChannelAndroidAsync: function createChannelAndroidAsync(id, channel) {
      if (_reactNative.Platform.OS === 'ios') {
        console.warn('createChannelAndroidAsync(...) has no effect on iOS');
        return Promise.resolve();
      }

      if (!IS_USING_NEW_BINARY) {
        return _legacySaveChannel(id, channel);
      }

      return ExponentNotifications.createChannel(id, channel);
    },
    deleteChannelAndroidAsync: function deleteChannelAndroidAsync(id) {
      if (_reactNative.Platform.OS === 'ios') {
        console.warn('deleteChannelAndroidAsync(...) has no effect on iOS');
        return Promise.resolve();
      }

      if (!IS_USING_NEW_BINARY) {
        return Promise.resolve();
      }

      return ExponentNotifications.deleteChannel(id);
    },
    presentLocalNotificationAsync: function presentLocalNotificationAsync(notification) {
      var _channel;

      return regeneratorRuntime.async(function presentLocalNotificationAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _validateNotification(notification);

              notification = _processNotification(notification);

              if (!(_reactNative.Platform.OS === 'ios')) {
                _context3.next = 6;
                break;
              }

              return _context3.abrupt("return", ExponentNotifications.presentLocalNotification(notification));

            case 6:
              _channel = void 0;

              if (!notification.channelId) {
                _context3.next = 11;
                break;
              }

              _context3.next = 10;
              return regeneratorRuntime.awrap(_legacyReadChannel(notification.channelId));

            case 10:
              _channel = _context3.sent;

            case 11:
              if (!IS_USING_NEW_BINARY) {
                _context3.next = 16;
                break;
              }

              _legacyDeleteChannel(notification.channelId);

              return _context3.abrupt("return", ExponentNotifications.presentLocalNotificationWithChannel(notification, _channel));

            case 16:
              if (_channel) {
                notification.sound = _channel.sound;
                notification.priority = _channel.priority;
                notification.vibrate = _channel.vibrate;
              }

              return _context3.abrupt("return", ExponentNotifications.presentLocalNotification(notification));

            case 18:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    scheduleLocalNotificationAsync: function scheduleLocalNotificationAsync(notification) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var now, timeAsDateObj, validOptions, _channel;

      return regeneratorRuntime.async(function scheduleLocalNotificationAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              now = Date.now();

              _validateNotification(notification);

              notification = _processNotification(notification);

              if (!options.time) {
                _context4.next = 10;
                break;
              }

              timeAsDateObj = null;

              if (options.time && typeof options.time === 'number') {
                timeAsDateObj = new Date(options.time);

                if (timeAsDateObj === 'Invalid Date') {
                  timeAsDateObj = null;
                }
              } else if (options.time && options.time instanceof Date) {
                timeAsDateObj = options.time;
              }

              if (timeAsDateObj) {
                _context4.next = 8;
                break;
              }

              throw new Error("Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.");

            case 8:
              (0, _warning2.default)(timeAsDateObj >= now, "Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?");

              if (_reactNative.Platform.OS === 'ios') {
                options = _extends({}, options, {
                  time: timeAsDateObj.getTime()
                });
              } else {
                options = _extends({}, options, {
                  time: timeAsDateObj
                });
              }

            case 10:
              if (!(options.intervalMs != null && options.repeat != null)) {
                _context4.next = 12;
                break;
              }

              throw new Error("Pass either the \"repeat\" option or \"intervalMs\" option, not both");

            case 12:
              if (!(options.repeat != null)) {
                _context4.next = 16;
                break;
              }

              validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);

              if (validOptions.has(options.repeat)) {
                _context4.next = 16;
                break;
              }

              throw new Error("Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option");

            case 16:
              if (!(options.intervalMs != null)) {
                _context4.next = 21;
                break;
              }

              if (!(_reactNative.Platform.OS === 'ios')) {
                _context4.next = 19;
                break;
              }

              throw new Error("The \"intervalMs\" option is not supported on iOS");

            case 19:
              if (!(options.intervalMs <= 0 || !Number.isInteger(options.intervalMs))) {
                _context4.next = 21;
                break;
              }

              throw new Error("Pass an integer greater than zero as the value for the \"intervalMs\" option");

            case 21:
              if (!(_reactNative.Platform.OS === 'ios')) {
                _context4.next = 25;
                break;
              }

              return _context4.abrupt("return", ExponentNotifications.scheduleLocalNotification(notification, options));

            case 25:
              _channel = void 0;

              if (!notification.channelId) {
                _context4.next = 30;
                break;
              }

              _context4.next = 29;
              return regeneratorRuntime.awrap(_legacyReadChannel(notification.channelId));

            case 29:
              _channel = _context4.sent;

            case 30:
              if (!IS_USING_NEW_BINARY) {
                _context4.next = 35;
                break;
              }

              _legacyDeleteChannel(notification.channelId);

              return _context4.abrupt("return", ExponentNotifications.scheduleLocalNotificationWithChannel(notification, options, _channel));

            case 35:
              if (_channel) {
                notification.sound = _channel.sound;
                notification.priority = _channel.priority;
                notification.vibrate = _channel.vibrate;
              }

              return _context4.abrupt("return", ExponentNotifications.scheduleLocalNotification(notification, options));

            case 37:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    dismissNotificationAsync: function dismissNotificationAsync(notificationId) {
      return regeneratorRuntime.async(function dismissNotificationAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_reactNative.Platform.OS === 'android')) {
                _context5.next = 4;
                break;
              }

              return _context5.abrupt("return", ExponentNotifications.dismissNotification(notificationId));

            case 4:
              throw new Error('Dismissing notifications is not supported on iOS');

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    dismissAllNotificationsAsync: function dismissAllNotificationsAsync() {
      return regeneratorRuntime.async(function dismissAllNotificationsAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_reactNative.Platform.OS === 'android')) {
                _context6.next = 4;
                break;
              }

              return _context6.abrupt("return", ExponentNotifications.dismissAllNotifications());

            case 4:
              throw new Error('Dismissing notifications is not supported on iOS');

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    cancelScheduledNotificationAsync: function cancelScheduledNotificationAsync(notificationId) {
      return ExponentNotifications.cancelScheduledNotification(notificationId);
    },
    cancelAllScheduledNotificationsAsync: function cancelAllScheduledNotificationsAsync() {
      return ExponentNotifications.cancelAllScheduledNotifications();
    },
    addListener: function addListener(listener) {
      _maybeInitEmitter();

      if (_initialNotification) {
        var initialNotification = _initialNotification;
        _initialNotification = null;
        setTimeout(function () {
          _emitNotification(initialNotification);
        }, 0);
      }

      return _emitter.addListener('notification', listener);
    },
    getBadgeNumberAsync: function getBadgeNumberAsync() {
      return regeneratorRuntime.async(function getBadgeNumberAsync$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (ExponentNotifications.getBadgeNumberAsync) {
                _context7.next = 2;
                break;
              }

              return _context7.abrupt("return", 0);

            case 2:
              return _context7.abrupt("return", ExponentNotifications.getBadgeNumberAsync());

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    },
    setBadgeNumberAsync: function setBadgeNumberAsync(number) {
      return regeneratorRuntime.async(function setBadgeNumberAsync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (ExponentNotifications.setBadgeNumberAsync) {
                _context8.next = 2;
                break;
              }

              return _context8.abrupt("return");

            case 2:
              return _context8.abrupt("return", ExponentNotifications.setBadgeNumberAsync(number));

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  };
});